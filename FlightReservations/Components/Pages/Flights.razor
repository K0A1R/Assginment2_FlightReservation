@page "/flights"
@using FlightReservations.Data

<h1>Flight Finder</h1>
<label>From:</label>
<input type="text" @bind="origin"/>
<label>To:</label>
<input type="text" @bind="destination"/>
<label>Day:</label>
<input type="text" @bind="day"/>

<button @onclick="OnFindFlights">Find Flights</button>

<h2>Flights</h2>
<select @onchange="OnShowFlight">
    <option disabled selected>Select a flight</option>
    @foreach (var f in flights)
    {
        <option value="@f.Flight_Code">@($"{f.Flight_Code}, {f.Airline}, {f.Origin_Airport}, {f.Destination_Airport}, {f.Day}, {f.Time}, {f.Cost}")</option>
    }
</select>

<h2>Reserve</h2>
<div>
    <p>Flight Code:</p>
    <input type="text" value="@selectedFlightCode" disabled/>
</div>
<div>
    <p>Airline:</p>
    <input type="text" value="@selectedAirline" disabled/>
</div>
<div>
    <p>Day:</p>
    <input type="text" value="@selectedDay" disabled/>
</div>
<div>
    <p>Time:</p>
    <input type="text" value="@selectedTime" disabled/>
</div>
<div>
    <p>Cost:</p>
    <input type="text" value="@selectedCost" disabled/>
</div>
<div>
    <p>Name:</p>
    <input type="text" @bind="@travelerName"/>
</div>
<div>
    <p>Citizenship:</p>
    <input type="text" @bind="@travelerCitizen"/>
</div>
<div>
    <button @onclick="MakeReservation">Reserve</button>
</div>
<p>@errorMessage</p>
<div>@reservationCode</div>
@code {
    FlightManager fm = new FlightManager();
    //Loads in list of flights using FlightManager class method GetFlights.
    List<Flight> flights = FlightManager.GetFlights();
    string selectedFlightCode;
    string selectedAirline;
    string selectedDay;
    string selectedTime;
    string selectedCost;
    string origin;
    string destination;
    string day;
    string travelerName;
    string travelerCitizen;
    string errorMessage;
    string reservationCode;

    //OnFindFlights method: This method is called when the "Find Flights" button is clicked. 
    //Calls FindFlights method in FlightManager class and finds flight based on origin, destination and day.
    private void OnFindFlights()
    {
        flights = fm.FindFlights(origin, destination, day);
        if (flights.Count > 0)
        {
            //Automatically selects the first flight in dropdown list.
            SelectFlight(flights[0].Flight_Code);
        }
        else
        {
            ClearSelectedFlight();
        }
    }

    //OnShowFlight method: This method is called when a flight is selected from the dropdown.
    //Sets flightCode to value based on change event. Then calls SelectFlight method to display flight information.
    private void OnShowFlight(ChangeEventArgs e)
    {
        string flightCode = e.Value.ToString();
        SelectFlight(flightCode);
    }

    //SelectFlight method: Selects a flight and updates the flight details in the textboxes by binding variables.
    private void SelectFlight(string flightCode)
    {
        Flight selectedFlight = null;
        //Loops throught flights list to find flight.
        foreach (var flight in flights)
        {
            if (flight.Flight_Code == flightCode)
            {
                selectedFlight = flight;
                break;
            }
        }
        //If flight is found, setting variables to selected flight details to display.
        if (selectedFlight != null)
        {
            selectedFlightCode = selectedFlight.Flight_Code;
            selectedAirline = selectedFlight.Airline;
            selectedDay = selectedFlight.Day;
            selectedTime = selectedFlight.Time;
            selectedCost = selectedFlight.Cost.ToString();
        }
    }

    //ClearSelectedFlight method: Clears the selected flight details from textboxes.
    private void ClearSelectedFlight()
    {
        selectedFlightCode = null;
        selectedAirline = null;
        selectedDay = null;
        selectedTime = null;
        selectedCost = null;
    }
    //MakeReservation method: Error checks. Makes reservation if no exceptions are thrown.
    private void MakeReservation()
    {
        errorMessage = null;

        try
        {
            //If a reservation is to be made but no flight is selected. Error message displayed.
            if (string.IsNullOrEmpty(selectedFlightCode))
            {
                errorMessage = "Please select a flight before trying to make a reservation.";
                return;
            }

            //If name field is empty. Error message displayed.
            if (string.IsNullOrEmpty(travelerName))
            {
                errorMessage = "Travelers Name is blank. Please enter traveler's name.";
                return;
            }

            //If citizenship field is empty. Error message is displayed.
            if (string.IsNullOrEmpty(travelerCitizen))
            {
                errorMessage = "Travelers Citizenship is blank. Please enter traveler's citizenship.";
                return;
            }

            Flight selectedFlight = null;
            //Loops throught flights list to find flight.
            foreach (var flight in flights)
            {
                if (flight.Flight_Code == selectedFlightCode)
                {
                    selectedFlight = flight;
                    break;
                }
            }

            //If flight is completely booked. Throw an exception.
            if (selectedFlight.Num_Seats <= 0)
            {
                throw new Exception("Selected flight is fully booked.");
            }

            //If flight is null. Throw an exception.
            if (selectedFlight == null)
            {
                throw new Exception("Selected flight not found.");
            }

            //Reservation object is made.
            Reservation reservation = new Reservation(selectedFlight, travelerName, travelerCitizen);
            reservationCode = reservation.ReservationCode;

            //Save reservation to binary file
            //ReservationManager.SaveReservation(reservation);

            errorMessage = "Reservation successful!";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
